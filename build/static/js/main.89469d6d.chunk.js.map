{"version":3,"sources":["useAdobeAnalytics.js","App.js","index.js"],"names":["satelliteScriptPromise","satelliteScriptLoaded","_initAnalytics","window","digitalData","s","_satellite","Promise","resolve","test","location","toString","reject","script","document","createElement","src","addEventListener","head","appendChild","useAdobeAnalytics","digitalDataOrOptions","useState","initialized","setInitialized","queuedFns","setQueuedFns","track","args","console","log","useEffect","then","setTimeout","catch","err","error","forEach","f","fn","App","page","pageInfo","pageName","primaryCategory","subCategory","user","profile","profileInfo","profileID","className","rootElement","getElementById","ReactDOM","render"],"mappings":"kIAEIA,EAAwBC,E,4CAiFtBC,EAAiB,WAOrB,OANKC,OAAOC,cACVD,OAAOC,YAAc,IAKnBJ,IAA2BC,EACtBD,EAQJG,OAAOE,GAAMF,OAAOG,WAOlBC,QAAQC,WAtCG,qBAAqBC,KAAKN,OAAOO,SAASC,YAgC1DX,EA9BK,IAAIO,SAAQ,SAACC,EAASI,GAC3B,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAP,gIACAH,EAAOI,iBAAiB,QAAQ,WAC9BhB,GAAwB,EACxBO,OAEFK,EAAOI,iBAAiB,UAAWL,GAEnCE,SAASI,MAAQJ,SAASI,KAAKC,YAAYN,QA8BhCO,EAhGS,SAACC,GAA0B,IAAD,EACZC,oBAAS,GADG,mBAC3CC,EAD2C,KAC9BC,EAD8B,OAEhBF,mBAAS,IAFO,mBAE3CG,EAF2C,KAEhCC,EAFgC,KAe5CC,EAAQ,WAAmB,IAAC,IAAD,qBAANC,EAAM,yBAANA,EAAM,iBAC7B,EAAAC,SAAQC,IAAR,SAAY,gBAAZ,OAA+BF,KAgCjC,OAjBAG,qBAAU,WACR7B,IACG8B,MAAK,WACJC,YAAW,WACTJ,QAAQC,IAAI,0BACZN,GAAe,KACd,QAEJU,OAAM,SAACC,GAAD,OAASN,QAAQO,MAAMD,QAC/B,IAEHJ,qBAAU,WACJR,IAtCJM,QAAQC,IAAI,0BACZD,QAAQC,IAAI,SAAUL,GACtBA,EAAUY,SAAQ,SAACC,GACG,oBAATA,EAAEC,KACXV,QAAQC,IAAI,SAAUQ,EAAEV,MACxBU,EAAEC,GAAF,MAAAD,EAAC,YAAOA,EAAEV,cAoCb,CAACL,IAEG,CACLI,MAAOJ,EAAcI,EA9BH,WAClBE,QAAQC,IAAI,mBADyB,2BAANF,EAAM,yBAANA,EAAM,gBAErCF,EAAa,GAAD,mBACPD,GADO,CAEV,CACEG,OACAW,GAAIZ,OAyBPJ,gBC5DU,SAASiB,IAAO,IACrBb,EAAUP,IAAVO,MAyBR,OAvBAI,qBAAU,WACRJ,EAAM,CACJc,KAAM,CACJC,SAAU,CACRC,SAAU,GACVC,gBAAiB,GACjBC,YAAa,IAEjBC,KAAM,CACJ,CACEC,QAAS,CACP,CACEC,YAAa,CACXC,UAAW,aAQtB,IAEI,qBAAKC,UAAU,QCxBxB,IAAMC,EAAcrC,SAASsC,eAAe,QAC5CC,IAASC,OAAO,cAACd,EAAD,IAASW,K","file":"static/js/main.89469d6d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nlet satelliteScriptPromise, satelliteScriptLoaded;\n\n/* eslint-disable */\n// Function.prototype.clone = function(args) {\n//   console.log(\"args\", args, arguments);\n//   const that = this;\n//   return function temp() {\n//     return that.apply(this, arguments);\n//   };\n// };\n\nlet useAdobeAnalytics = (digitalDataOrOptions) => {\n  let [initialized, setInitialized] = useState(false);\n  let [queuedFns, setQueuedFns] = useState([]);\n\n  let callQueuedFns = () => {\n    console.log(\"should fire queued fns\");\n    console.log(\"queued\", queuedFns);\n    queuedFns.forEach((f) => {\n      if (typeof f.fn === \"function\") {\n        console.log(\"f.args\", f.args);\n        f.fn(...f.args);\n      }\n    });\n  };\n\n  var track = function (...args) {\n    console.log(\"track called\", ...args);\n  };\n\n  var trackNotReady = function (...args) {\n    console.log(\"track not ready\");\n    setQueuedFns([\n      ...queuedFns,\n      {\n        args,\n        fn: track\n      }\n    ]);\n    //  console.log(\"cloned\", cloned());\n  };\n\n  useEffect(() => {\n    _initAnalytics()\n      .then(() => {\n        setTimeout(() => {\n          console.log(\"setInitialized to true\");\n          setInitialized(true);\n        }, 3000);\n      })\n      .catch((err) => console.error(err)); // eslint-disable-line\n  }, []);\n\n  useEffect(() => {\n    if (initialized) {\n      callQueuedFns();\n    }\n  }, [initialized]);\n\n  return {\n    track: initialized ? track : trackNotReady,\n     initialized\n  };\n};\n\nconst _initScript = () => {\n  const isStaging = /dev|test|localhost/.test(window.location.toString());\n\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = `https://assets.adobedtm.com/027a4b956dfde71f578f2758fd64745bb956cb47/satelliteLib-3553430d7b7afdf815f5e347a69e8c58976c3ca2.js`;\n    script.addEventListener(\"load\", () => {\n      satelliteScriptLoaded = true;\n      resolve();\n    });\n    script.addEventListener(\"onerror\", reject);\n\n    document.head && document.head.appendChild(script);\n  });\n};\n\nconst _initAnalytics = () => {\n  if (!window.digitalData) {\n    window.digitalData = {};\n  }\n\n  // script loading has started, but not completed, return a promise that will\n  // resolve when complete\n  if (satelliteScriptPromise && !satelliteScriptLoaded) {\n    return satelliteScriptPromise;\n  }\n\n  // script has not yet been loaded, nor has loading begun.\n  // load the script and return a promise that will resolve when complete\n  // NOTE: we check both `s` and `_satellite` as a fully Adobe Analytics script will create both.\n  // We were seeing some cases where the Adobe Analytics Debugger plugin would inject `_satellite`\n  // but not `s`, causing issues if we only check `_satellite`\n  if (!window.s || !window._satellite) {\n    satelliteScriptPromise = _initScript();\n\n    return satelliteScriptPromise;\n  }\n\n  // script is already loaded, just resolve\n  return Promise.resolve();\n};\n\nexport default useAdobeAnalytics;\n","import React, { useEffect } from \"react\";\nimport useAdobeAnalytics from \"./useAdobeAnalytics\";\n\nexport default function App() {\n  const { track } = useAdobeAnalytics();\n\n  useEffect(() => {\n    track({\n      page: {\n        pageInfo: {\n          pageName: [],\n          primaryCategory: [],\n          subCategory: []\n        },\n      user: [\n        {\n          profile: [\n            {\n              profileInfo: {\n                profileID: [],\n                },\n              }\n          ]\n        }\n      ],\n    }\n    });\n  }, []);\n\n  return <div className=\"App\"></div>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}